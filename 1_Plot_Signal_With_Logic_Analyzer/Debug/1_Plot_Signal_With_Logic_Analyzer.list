
1_Plot_Signal_With_Logic_Analyzer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000018c  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000324  08000324  00002a00  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000324  08000324  00002a00  2**0
                  CONTENTS
  4 .ARM          00000000  08000324  08000324  00002a00  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000324  08000324  00002a00  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000324  08000324  00001324  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000328  08000328  00001328  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000a00  20000000  0800032c  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  20000a00  08000d2c  00002a00  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000a24  08000d2c  00002a24  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00002a00  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000413  00000000  00000000  00002a30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000001c5  00000000  00000000  00002e43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000070  00000000  00000000  00003008  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000038  00000000  00000000  00003078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018222  00000000  00000000  000030b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000ae2  00000000  00000000  0001b2d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000883d9  00000000  00000000  0001bdb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a418d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000009c  00000000  00000000  000a41d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a7  00000000  00000000  000a426c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000a00 	.word	0x20000a00
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800030c 	.word	0x0800030c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000a04 	.word	0x20000a04
 80001d4:	0800030c 	.word	0x0800030c

080001d8 <main>:
int iplot;

static void plot_input_signal(void);
static void pseudo_dly(int dly);

int main(){
 80001d8:	b580      	push	{r7, lr}
 80001da:	af00      	add	r7, sp, #0
	/*System Control Block points to Coprocessor Access Control Register,
	  habiliting the Floating Point Unit of CP10 and CP11 */
	SCB->CPACR |=  ((1UL << 20)|
 80001dc:	4b05      	ldr	r3, [pc, #20]	@ (80001f4 <main+0x1c>)
 80001de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80001e2:	4a04      	ldr	r2, [pc, #16]	@ (80001f4 <main+0x1c>)
 80001e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80001e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
					(1UL << 21)|
					(1UL << 22)|
					(1UL << 23));

	while(1){
		plot_input_signal();
 80001ec:	f000 f804 	bl	80001f8 <plot_input_signal>
 80001f0:	e7fc      	b.n	80001ec <main+0x14>
 80001f2:	bf00      	nop
 80001f4:	e000ed00 	.word	0xe000ed00

080001f8 <plot_input_signal>:
	}
}

static void plot_input_signal(void){
 80001f8:	b580      	push	{r7, lr}
 80001fa:	af00      	add	r7, sp, #0
	for(iplot = 0;iplot < HZ_5_SIG_LEN;iplot++){
 80001fc:	4b0e      	ldr	r3, [pc, #56]	@ (8000238 <plot_input_signal+0x40>)
 80001fe:	2200      	movs	r2, #0
 8000200:	601a      	str	r2, [r3, #0]
 8000202:	e010      	b.n	8000226 <plot_input_signal+0x2e>
		g_in_sig_sample = _640_points_ecg_[iplot];
 8000204:	4b0c      	ldr	r3, [pc, #48]	@ (8000238 <plot_input_signal+0x40>)
 8000206:	681b      	ldr	r3, [r3, #0]
 8000208:	4a0c      	ldr	r2, [pc, #48]	@ (800023c <plot_input_signal+0x44>)
 800020a:	009b      	lsls	r3, r3, #2
 800020c:	4413      	add	r3, r2
 800020e:	681b      	ldr	r3, [r3, #0]
 8000210:	4a0b      	ldr	r2, [pc, #44]	@ (8000240 <plot_input_signal+0x48>)
 8000212:	6013      	str	r3, [r2, #0]
		pseudo_dly(1e4);
 8000214:	f242 7010 	movw	r0, #10000	@ 0x2710
 8000218:	f000 f814 	bl	8000244 <pseudo_dly>
	for(iplot = 0;iplot < HZ_5_SIG_LEN;iplot++){
 800021c:	4b06      	ldr	r3, [pc, #24]	@ (8000238 <plot_input_signal+0x40>)
 800021e:	681b      	ldr	r3, [r3, #0]
 8000220:	3301      	adds	r3, #1
 8000222:	4a05      	ldr	r2, [pc, #20]	@ (8000238 <plot_input_signal+0x40>)
 8000224:	6013      	str	r3, [r2, #0]
 8000226:	4b04      	ldr	r3, [pc, #16]	@ (8000238 <plot_input_signal+0x40>)
 8000228:	681b      	ldr	r3, [r3, #0]
 800022a:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800022e:	dbe9      	blt.n	8000204 <plot_input_signal+0xc>
	}
}
 8000230:	bf00      	nop
 8000232:	bf00      	nop
 8000234:	bd80      	pop	{r7, pc}
 8000236:	bf00      	nop
 8000238:	20000a20 	.word	0x20000a20
 800023c:	20000000 	.word	0x20000000
 8000240:	20000a1c 	.word	0x20000a1c

08000244 <pseudo_dly>:

static void pseudo_dly(int dly){
 8000244:	b480      	push	{r7}
 8000246:	b085      	sub	sp, #20
 8000248:	af00      	add	r7, sp, #0
 800024a:	6078      	str	r0, [r7, #4]
	for(int i = 0;i < dly;i++){
 800024c:	2300      	movs	r3, #0
 800024e:	60fb      	str	r3, [r7, #12]
 8000250:	e002      	b.n	8000258 <pseudo_dly+0x14>
 8000252:	68fb      	ldr	r3, [r7, #12]
 8000254:	3301      	adds	r3, #1
 8000256:	60fb      	str	r3, [r7, #12]
 8000258:	68fa      	ldr	r2, [r7, #12]
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	429a      	cmp	r2, r3
 800025e:	dbf8      	blt.n	8000252 <pseudo_dly+0xe>

	}
}
 8000260:	bf00      	nop
 8000262:	bf00      	nop
 8000264:	3714      	adds	r7, #20
 8000266:	46bd      	mov	sp, r7
 8000268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800026c:	4770      	bx	lr
	...

08000270 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000270:	480d      	ldr	r0, [pc, #52]	@ (80002a8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000272:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000274:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000278:	480c      	ldr	r0, [pc, #48]	@ (80002ac <LoopForever+0x6>)
  ldr r1, =_edata
 800027a:	490d      	ldr	r1, [pc, #52]	@ (80002b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800027c:	4a0d      	ldr	r2, [pc, #52]	@ (80002b4 <LoopForever+0xe>)
  movs r3, #0
 800027e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000280:	e002      	b.n	8000288 <LoopCopyDataInit>

08000282 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000282:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000284:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000286:	3304      	adds	r3, #4

08000288 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000288:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800028a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800028c:	d3f9      	bcc.n	8000282 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800028e:	4a0a      	ldr	r2, [pc, #40]	@ (80002b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000290:	4c0a      	ldr	r4, [pc, #40]	@ (80002bc <LoopForever+0x16>)
  movs r3, #0
 8000292:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000294:	e001      	b.n	800029a <LoopFillZerobss>

08000296 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000296:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000298:	3204      	adds	r2, #4

0800029a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800029a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800029c:	d3fb      	bcc.n	8000296 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800029e:	f000 f811 	bl	80002c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002a2:	f7ff ff99 	bl	80001d8 <main>

080002a6 <LoopForever>:

LoopForever:
  b LoopForever
 80002a6:	e7fe      	b.n	80002a6 <LoopForever>
  ldr   r0, =_estack
 80002a8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80002ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002b0:	20000a00 	.word	0x20000a00
  ldr r2, =_sidata
 80002b4:	0800032c 	.word	0x0800032c
  ldr r2, =_sbss
 80002b8:	20000a00 	.word	0x20000a00
  ldr r4, =_ebss
 80002bc:	20000a24 	.word	0x20000a24

080002c0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002c0:	e7fe      	b.n	80002c0 <ADC_IRQHandler>
	...

080002c4 <__libc_init_array>:
 80002c4:	b570      	push	{r4, r5, r6, lr}
 80002c6:	4d0d      	ldr	r5, [pc, #52]	@ (80002fc <__libc_init_array+0x38>)
 80002c8:	4c0d      	ldr	r4, [pc, #52]	@ (8000300 <__libc_init_array+0x3c>)
 80002ca:	1b64      	subs	r4, r4, r5
 80002cc:	10a4      	asrs	r4, r4, #2
 80002ce:	2600      	movs	r6, #0
 80002d0:	42a6      	cmp	r6, r4
 80002d2:	d109      	bne.n	80002e8 <__libc_init_array+0x24>
 80002d4:	4d0b      	ldr	r5, [pc, #44]	@ (8000304 <__libc_init_array+0x40>)
 80002d6:	4c0c      	ldr	r4, [pc, #48]	@ (8000308 <__libc_init_array+0x44>)
 80002d8:	f000 f818 	bl	800030c <_init>
 80002dc:	1b64      	subs	r4, r4, r5
 80002de:	10a4      	asrs	r4, r4, #2
 80002e0:	2600      	movs	r6, #0
 80002e2:	42a6      	cmp	r6, r4
 80002e4:	d105      	bne.n	80002f2 <__libc_init_array+0x2e>
 80002e6:	bd70      	pop	{r4, r5, r6, pc}
 80002e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80002ec:	4798      	blx	r3
 80002ee:	3601      	adds	r6, #1
 80002f0:	e7ee      	b.n	80002d0 <__libc_init_array+0xc>
 80002f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80002f6:	4798      	blx	r3
 80002f8:	3601      	adds	r6, #1
 80002fa:	e7f2      	b.n	80002e2 <__libc_init_array+0x1e>
 80002fc:	08000324 	.word	0x08000324
 8000300:	08000324 	.word	0x08000324
 8000304:	08000324 	.word	0x08000324
 8000308:	08000328 	.word	0x08000328

0800030c <_init>:
 800030c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800030e:	bf00      	nop
 8000310:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000312:	bc08      	pop	{r3}
 8000314:	469e      	mov	lr, r3
 8000316:	4770      	bx	lr

08000318 <_fini>:
 8000318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800031a:	bf00      	nop
 800031c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800031e:	bc08      	pop	{r3}
 8000320:	469e      	mov	lr, r3
 8000322:	4770      	bx	lr
